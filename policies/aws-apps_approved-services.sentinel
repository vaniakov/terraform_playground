##### Imports #####

import "tfplan"
import "json"

##### Functions #####

# Check resources against whitelist
check_resources = func(allowed_resources) {
  validated = true

  #print(json.marshal(tfplan.resources))
  print("#########################################################################################################")
  print("Terraform resources used in this plan:")
  for tfplan.resources as resource_name, body {
    if (resource_name else "") not in allowed_resources {
      print(" - ", resource_name, " RESTRICTED!")
      validated = false
    } else {
      print(" - ", resource_name, " - PASS")
    }
  }
  print("#########################################################################################################")

  return validated
}

##### Lists #####

# Allowed Terraform resources
allowed_resources = [
  "aws_security_group",
  "aws_instance",
  "aws_security_group_rule",
  "aws_autoscaling_attachment",
  "aws_autoscaling_group",
  "aws_autoscaling_lifecycle_hook",
  "aws_autoscaling_notification",
  "aws_autoscaling_policy",
  "aws_autoscaling_schedule",
  "aws_launch_configuration",
  "aws_launch_template",
  "aws_cloudwatch_dashboard",
  "aws_cloudwatch_event_permission",
  "aws_cloudwatch_event_rule",
  "aws_cloudwatch_event_target",
  "aws_cloudwatch_log_destination",
  "aws_cloudwatch_log_destination_policy",
  "aws_cloudwatch_log_group",
  "aws_cloudwatch_log_metric_filter",
  "aws_cloudwatch_log_resource_policy",
  "aws_cloudwatch_log_stream",
  "aws_cloudwatch_log_subscription_filter",
  "aws_cloudwatch_metric_alarm",
  "aws_dms_endpoint",
  "aws_dms_replication_instance",
  "aws_dms_replication_task",
  "aws_dms_replication_subnet_group",
  "aws_efs_file_system",
  "aws_efs_mount_target",
  "aws_app_cookie_stickiness_policy",
  "aws_elb",
  "aws_elb_attachment",
  "aws_lb_cookie_stickiness_policy",
  "aws_lb_ssl_negotiation_policy",
  "aws_load_balancer_backend_server_policy",
  "aws_load_balancer_listener_policy",
  "aws_load_balancer_policy",
  "aws_proxy_protocol_policy",
  "aws_lb",
  "aws_lb_listener",
  "aws_lb_listener_certificate",
  "aws_lb_listener_rule",
  "aws_lb_target_group",
  "aws_lb_target_group_attachment",
  "aws_lambda_alias",
  "aws_lambda_event_source_mapping",
  "aws_lambda_function",
  "aws_lambda_layer_version",
  "aws_lambda_permission",
  "aws_lambda_function_event_invoke_config",
  "aws_mq_broker",
  "aws_mq_configuration",
  "aws_network_interface",
  "aws_network_interface_attachment",
  "aws_dynamodb_table",
  "aws_db_cluster_snapshot",
  "aws_db_event_subscription",
  "aws_db_instance",
  "aws_db_instance_role_association",
  "aws_db_option_group",
  "aws_db_parameter_group",
  "aws_db_security_group",
  "aws_db_snapshot",
  "aws_db_subnet_group",
  "aws_rds_cluster",
  "aws_rds_cluster_endpoint",
  "aws_rds_cluster_instance",
  "aws_rds_cluster_parameter_group",
  "aws_rds_global_cluster",
  "aws_s3_account_public_access_block",
  "aws_s3_bucket",
  "aws_s3_bucket_inventory",
  "aws_s3_bucket_metric",
  "aws_s3_bucket_notification",
  "aws_s3_bucket_object",
  "aws_s3_bucket_policy",
  "aws_s3_bucket_public_access_block",
  "aws_secretsmanager_secret",
  "aws_secretsmanager_secret_version",
  "aws_sns_platform_application",
  "aws_sns_sms_preferences",
  "aws_sns_topic",
  "aws_sns_topic_policy",
  "aws_sns_topic_subscription",
  "aws_sqs_queue",
  "aws_sqs_queue_policy",
  "aws_key_pair",
  "aws_iam_server_certificate",
  "local_file",
  "aws_ebs_volume",
  "aws_kms_grant",
  "aws_volume_attachment",
  "aws_iam_policy_document",
  "aws_eks_cluster",
  "aws_eks_node_group",
  "aws_eip",
  "aws_api_gateway_rest_api",
  "aws_api_gateway_resource",
  "aws_api_gateway_method",
  "aws_api_gateway_integration",
  "aws_api_gateway_deployment",
  "aws_api_gateway_authorizer",
  "aws_api_gateway_api_key",
  "aws_api_gateway_usage_plan",
  "aws_api_gateway_usage_plan_key",
  "aws_elasticache_cluster",
  "aws_elasticache_parameter_group",
  "aws_elasticache_replication_group",
  "aws_elasticache_security_group",
  "aws_elasticache_subnet_group",
  "null_resource",

  # TODO: remove these after refactoring w-sharedtools-scalr-xxx workspace(s)
  "aws_iam_role",
  "aws_iam_role_policy",
  "aws_iam_role_policy_attachment",

  # Helm Provider Resources
  "helm_release",
  "helm_repository",

  # Kubernetes Provider Resources:
  "kubernetes_api_service",
  "kubernetes_cluster_role",
  "kubernetes_cluster_role_binding",
  "kubernetes_config_map",
  "kubernetes_cron_job",
  "kubernetes_daemonset",
  "kubernetes_deployment",
  "kubernetes_endpoints",
  "kubernetes_horizontal_pod_autoscaler",
  "kubernetes_ingress",
  "kubernetes_job",
  "kubernetes_limit_range",
  "kubernetes_namespace",
  "kubernetes_network_policy",
  "kubernetes_persistent_volume",
  "kubernetes_persistent_volume_claim",
  "kubernetes_pod",
  "kubernetes_pod_disruption_budget",
  "kubernetes_priority_class",
  "kubernetes_replication_controller",
  "kubernetes_resource_quota",
  "kubernetes_role",
  "kubernetes_role_binding",
  "kubernetes_secret",
  "kubernetes_service",
  "kubernetes_service_account",
  "kubernetes_stateful_set",
  "kubernetes_storage_class",
]

##### Rules #####

# Main rule that calls the validation function and evaluates results
main = rule {
  check_resources(allowed_resources)
}
